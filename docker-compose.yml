version: "3.7"

services:

  # traefik
  # --------------------------------
  traefik:
    image: traefik
    command:
      - --api.insecure=false
      - --providers.docker
      - --api.dashboard=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.http.routers.dashboard.rule=Host(`traefik.chain-factory.lan`) && PathPrefix(`/dashboard`)"
# || PathPrefix(`/api`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.api.rule=Host(`traefik.chain-factory.lan`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=traefik-forward-auth"
      - "traefik.http.routers.api.middlewares=traefik-forward-auth"
      - "traefik.http.routers.dashboard.entrypoints=web"
      - "traefik.http.routers.api.entrypoints=web"
  # --------------------------------

  # traefik-forward-auth
  # --------------------------------
  traefik-forward-auth:
    image: thomseddon/traefik-forward-auth:2
    env_file: ./traefik-forward-auth.env
    extra_hosts:
      - keycloak.chain-factory.lan:172.16.19.15
    labels:
      - "traefik.http.middlewares.traefik-forward-auth.forwardauth.address=http://traefik-forward-auth:4181"
      - "traefik.http.middlewares.traefik-forward-auth.forwardauth.authResponseHeaders=X-Forwarded-User"
      - "traefik.http.services.traefik-forward-auth.loadbalancer.server.port=4181"
  # --------------------------------

  # whoami a simple test container for traefik-forward-auth
  # --------------------------------
  whoami:
    image: containous/whoami
    labels:
      - traefik.http.routers.whoami.rule=Host(`whoami.chain-factory.lan`)
      - traefik.http.routers.whoami.entrypoints=web
      - traefik.http.routers.whoami.middlewares=traefik-forward-auth
  # --------------------------------

  # keycloak
  # --------------------------------
  keycloak:
    image: bitnami/keycloak:latest
    environment:
      - KEYCLOAK_CREATE_ADMIN_USER=true
      - KEYCLOAK_JGROUPS_DISCOVERY_PROTOCOL=JDBC_PING
      - 'KEYCLOAK_JGROUPS_DISCOVERY_PROPERTIES=datasource_jndi_name=>java:jboss/datasources/KeycloakDS, initialize_sql=>"CREATE TABLE IF NOT EXISTS JGROUPSPING ( own_addr varchar(200) NOT NULL, cluster_name varchar(200) NOT NULL, created timestamp default current_timestamp, ping_data BYTEA, constraint PK_JGROUPSPING PRIMARY KEY (own_addr, cluster_name))"'
      - KEYCLOAK_CACHE_OWNERS_COUNT=3
      - KEYCLOAK_AUTH_CACHE_OWNERS_COUNT=3
    extra_hosts:
      - whoami.chain-factory.lan:172.16.19.15
      - auth.chain-factory.lan:172.16.19.15
    depends_on:
      - postgresql
    ports:
      - 8080:8080
    labels:
      - traefik.http.routers.keycloak.rule=Host(`keycloak.chain-factory.lan`)
      - traefik.http.routers.keycloak.entrypoints=web
  # --------------------------------

  # postgres for keycloak
  # --------------------------------
  postgresql:
    image: docker.io/bitnami/postgresql:11
    restart: unless-stopped
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - POSTGRESQL_USERNAME=bn_keycloak
      - POSTGRESQL_DATABASE=bitnami_keycloak
    volumes:
      - ./data/postgresql:/bitnami/postgresql
    labels:
      - traefik.enable=false
  # --------------------------------

  # redis
  # --------------------------------
  redis:
    image: redis:6.0.5-alpine
    volumes:
      - ./data/redis:/data
    restart: unless-stopped
    ports:
      - 6379:6379
    labels:
      - traefik.enable=false

  redis-commander:
    image: rediscommander/redis-commander
    environment:
      - REDIS_PORT=6379
      - REDIS_HOST=redis
      - REDIS_DB=0
      - PORT=8000
    depends_on:
      - redis
    #ports:
    #  - 8001:8081
    restart: unless-stopped
    labels:
      - traefik.http.routers.redis-commander.rule=Host(`redis-commander.chain-factory.lan`)
      - traefik.http.routers.redis-commander.entrypoints=web
      - traefik.http.routers.redis-commander.middlewares=traefik-forward-auth
      - traefik.http.services.redis-commander.loadbalancer.server.port=8000
  # --------------------------------

  # rabbitmq
  # --------------------------------
  rabbitmq:
    build: services/rabbitmq
    hostname: my-rabbit
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:15672"]
        interval: 30s
        timeout: 10s
        retries: 5
    ports:
      - 8002:15672
      - 5672:5672
    restart: unless-stopped
    labels:
      - traefik.http.routers.rabbitmq.rule=Host(`rabbitmq.chain-factory.lan`)
      - traefik.http.routers.rabbitmq.entrypoints=web
      - traefik.http.routers.rabbitmq.middlewares=traefik-forward-auth
      - traefik.http.services.rabbitmq.loadbalancer.server.port=15672
  # --------------------------------

  # mongodb
  # --------------------------------
  mongodb:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - ./data/mongodb:/data/db
    ports:
      - 27017:27017
    restart: unless-stopped
    labels:
      - traefik.enable=false

  mongo-express:
    image: mongo-express
    restart: unless-stopped
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=example
      - ME_CONFIG_MONGODB_SERVER=mongodb
    ports:
      - 8003:8081
    labels:
      - traefik.http.routers.mongo-express.rule=Host(`mongo-express.chain-factory.lan`)
      - traefik.http.routers.mongo-express.entrypoints=web
      - traefik.http.routers.mongo-express.middlewares=traefik-forward-auth
      - traefik.http.services.mongo-express.loadbalancer.server.port=8081
  # --------------------------------

  # active-directory
  # --------------------------------
  active-directory:
    image: samba-domain
    build: services/active-directory
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./data/docker/containers/samba/data/:/var/lib/samba
      - ./data/docker/containers/samba/config/samba:/etc/samba/external
    environment:
      - DOMAIN=AD.LAN
      - DOMAINPASS=Start123
      - INSECURELDAP=true
    dns_search:
      - ad.lan
    dns:
      - 8.8.8.8
    hostname: localdc
    cap_add:
      - NET_ADMIN
    privileged: true
    restart: unless-stopped
    ports:
      - 53:53
      - 53:53/udp
      - 88:88
      - 88:88/udp
      - 135:135
      - 137-138:137-138/udp
      - 139:139
      - 389:389
      - 389:389/udp
      - 445:445
      - 464:464
      - 464:464/udp
      - 636:636
      - 1024-1044:1024-1044
      - 3268-3269:3268-3269
    labels:
      - traefik.enable=false
  # --------------------------------

  # vault
  # --------------------------------
  # s.OYU8EMDkmawoiQMJvQZdmY3t
  # +yTu2nApnCKpzLy9Y+XK0GUIqO3UFUbicXb7E58kYcY=
  vault:
    image: vault:latest
    volumes:
      - ./data/vault/file:/vault/file:rw
      - ./data/vault/config:/vault/config:rw
      - ./data/vault/data:/vault/data
      - ./data/vault/policies:/vault/policies
    environment:
      - VAULT_ADDR=http://0.0.0.0:8200
      - VAULT_API_ADDR=http://0.0.0.0:8200
      - VAULT_ADDRESS=http://0.0.0.0:8200
      - VAULT_TOKEN='00000000-0000-0000-0000-000000000000'
      - VAULT_UI=true
    cap_add:
      - IPC_LOCK
    entrypoint: vault server -config=/vault/config/vault.json
    ports:
      - 8004:8200
    restart: unless-stopped
    labels:
      - traefik.http.routers.vault.rule=Host(`vault.chain-factory.lan`)
      - traefik.http.routers.vault.entrypoints=web
      - traefik.http.routers.vault.middlewares=traefik-forward-auth
      - traefik.http.services.vault.loadbalancer.server.port=8200
  # --------------------------------

  # backend-api
  # --------------------------------
  backend-api:
    image: backend_api
    build: services/backend_api
    tty: true
    stdin_open: true
    #entrypoint: bash
    environment:
      - REDIS_HOST=redis
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - MONGODB_CONNECTION_URI=mongodb://root:example@mongodb/orchestrator_db?authSource=admin
      - MONGODB_DB=orchestrator_db
      - APP_SECRET=SECRET
    ports:
      - 8000:8000
      - 5003:5003
    depends_on:
      - rabbitmq
    links:
      - rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://rabbitmq:15672"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    labels:
      - traefik.http.routers.backend-api.rule=Host(`backend-api.chain-factory.lan`)
      - traefik.http.routers.backend-api.entrypoints=web
      - traefik.http.routers.backend-api.middlewares=traefik-forward-auth
      - traefik.http.services.backend-api.loadbalancer.server.port=8000
  # --------------------------------

  # authentication-api
  # --------------------------------
  authentication-api:
    image: authentication_api
    build: services/authentication_api
    environment:
      - LDAP_HOST=active-directory
    restart: unless-stopped
    labels:
      - traefik.enable=false
  # --------------------------------

